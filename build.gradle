import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask

buildscript {
    repositories {
        mavenCentral()

        maven {
            name 'forge'
            url 'https://maven.minecraftforge.net'
        }
        maven {
            // GTNH ForgeGradle Fork
            name = "GTNH Maven"
            url = "http://jenkins.usrv.eu:8081/nexus/content/groups/public/"
        }
        maven {
            name 'sonatype'
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        maven {
            name 'Scala CI dependencies'
            url 'https://repo1.maven.org/maven2/'
        }
        gradlePluginPortal()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2.11'
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
        classpath "se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.65"
    }
}

plugins {
    id 'maven-publish'
}

apply plugin: 'forge'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'se.bjurr.gitchangelog.git-changelog-gradle-plugin'

version = new File("version.txt").getText("UTF-8").trim()
group= "net.glease"
archivesBaseName = "Thaumcraft4Tweaks"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    replaceIn "TC4Tweak.java"
	replace '${version}', project.version
    runDir = "run"
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = 'glease'
                url = 'https://maven.glease.net/repos/releases/'
                metadataSources {
                    artifact()
                }
            }
        }
        filter {
            // pulls in api from azanor's repo in src jar for easy debugging, but otherwise same stuff from overmind's maven
            includeGroup('thaumcraft_fixed')
        }
    }
    maven {
        name 'gt'
        url 'http://gregtech.overminddl1.com/'
    }
    maven {
        name 'GTNH Maven'
        url 'http://jenkins.usrv.eu:8081/nexus/content/groups/public/'
    }
    maven {
        name 'minetweaker'
        url 'https://maven.blamejared.com/'
    }
}

configurations {
    create("runtimeOnlyNonPublishable") {
        description = "Runtime only dependencies that are not published alongside the jar"
        canBeConsumed = false
        canBeResolved = false
    }

    create("devOnlyNonPublishable") {
        description = "Runtime and compiletime dependencies that are not published alongside the jar (compileOnly + runtimeOnlyNonPublishable)"
        canBeConsumed = false
        canBeResolved = false
    }

    compileOnly.extendsFrom(devOnlyNonPublishable)
    runtimeOnlyNonPublishable.extendsFrom(devOnlyNonPublishable)

    runtimeClasspath.extendsFrom(runtimeOnlyNonPublishable)
    testRuntimeClasspath.extendsFrom(runtimeOnlyNonPublishable)

    implementation.extendsFrom(apiImplementation)
}

dependencies {
    devOnlyNonPublishable "com.azanor.baubles:Baubles:1.7.10-1.0.1.10:deobf"
    apiImplementation "thaumcraft_fixed:Thaumcraft:1.7.10-4.2.3.5:dev"
    devOnlyNonPublishable "com.github.GTNewHorizons:NotEnoughItems:2.7.8-GTNH:dev"
    compileOnly "MineTweaker3:MineTweaker3-API:3.0.11.23"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    from(layout.projectDirectory) {
        include 'COPYING'
        include 'LICENSE*'
    }
}

jar {
    from sourceSets.api.output
    manifest {
        attributes "FMLCorePlugin": "net.glease.tc4tweak.asm.LoadingPlugin"
        attributes "FMLCorePluginContainsFMLMod": true
    }
}

javadoc {
    source = sourceSets.api.allSource
    failOnError = false
    options {
        encoding = 'utf-8'
    }
}

tasks.register('javadocJar', Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

tasks.register('sourceJar', Jar) {
    from sourceSets.main.allSource
    from sourceSets.api.allSource
    from(layout.projectDirectory) {
        include 'COPYING'
        include 'LICENSE*'
    }
    archiveClassifier = 'sources'
    manifest {
        attributes "FMLCorePlugin": "net.glease.tc4tweak.asm.LoadingPlugin"
        attributes "FMLCorePluginContainsFMLMod": true
    }
}

tasks.register('devJar', Jar) {
    from sourceSets.main.output
    from sourceSets.api.output
    archiveClassifier = 'dev'
    manifest {
        attributes "FMLCorePlugin": "net.glease.tc4tweak.asm.LoadingPlugin"
        attributes "FMLCorePluginContainsFMLMod": true
    }
}

tasks.register('apiJar', Jar) {
    from sourceSets.api.output
    from sourceSets.api.allSource
    archiveClassifier = 'api'
}

artifacts {
    archives(devJar)
    archives(sourceJar)
    archives(apiJar)
    archives(javadocJar)
}

curseforge {
    apiKey = project.hasProperty('curseforgeAPI') ? project.curseforgeAPI : ''
    project {
        id = '431297'
        changelog = new File("CHANGELOG.md")
        releaseType = version.contains('beta') ? 'beta' : version.contains('alpha') ? 'alpha' : 'release'
        changelogType = 'markdown'
        relations {
            requiredDependency 'thaumcraft'
        }
        addGameVersion '1.7.10'

        mainArtifact(jar)
        addArtifact(devJar)
        addArtifact(sourceJar)
        addArtifact(apiJar)
    }
}

tasks.register('createSignedJarDir') {
    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }
    doLast {
        mkdir new File(jar.destinationDirectory.get().asFile, "signed").toString()
    }
}

tasks.register('gitTag', Exec) {
    onlyIf {
        !new File(projectDir, ".git/refs/tags/${version}").exists()
    }
    workingDir projectDir
    executable "git"
    args "tag", version
}

tasks.register('generateGitChangelog', GitChangelogTask) {
    file = new File("CHANGELOG.md")
    toRef = "HEAD"
    templateContent = """<!-- Generated file. DO NOT HAND EDIT!!! -->
# Change log
Change log generated from git history.
{{#tags}}
## {{name}}
 {{#issues}}
  {{#commits}}
   1. {{{messageTitle}}} ([@{{{hash}}} by {{{authorName}}}](https://github.com/Glease/TC4Tweaks/commit/{{{hashFull}}}))
  {{/commits}}
 {{/issues}}
{{/tags}}
"""
}

// sign jars
tasks.register('signJar') {
    dependsOn reobf
    dependsOn createSignedJarDir
    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }
    inputs.files jar.outputs.files
    jar.outputs.files.forEach {
        outputs.file jar.destinationDirectory.file("signed/" + it.name)
    }
    doLast {
        jar.outputs.files.forEach {
            ant.signjar destDir: new File(jar.destinationDirectory.get().asFile, "signed"),
                    sigfile: project.hasProperty("signerName") ? project.signerName : project.keyStoreAlias,
                    keystore: project.keyStore,
                    alias: project.keyStoreAlias,
                    storepass: project.keyStorePass,
                    keypass: project.keyStoreKeyPass,
                    jar: it
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'tc4tweaks'
            pom {
                name = 'TC4Tweaks'
                description = 'A mod that adds a bit of functionality and a bit of performance into thaumcraft 4.'
                url = 'https://github.com/Glease/TC4Tweaks/'
                licenses {
                    license {
                        name = 'GNU Affero General Public License 3.0 with additional exception for use with Minecraft Forge and in a modpack'
                        url = 'https://github.com/Glease/TC4Tweaks/blob/master/COPYING'
                    }
                }
                developers {
                    developer {
                        id = 'glee8e'
                        name = 'glee8e'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/Glease/TC4Tweaks.git'
                    developerConnection = 'scm:git:https://github.com/Glease/TC4Tweaks.git'
                    url = 'https://github.com/Glease/TC4Tweaks/'
                }
            }

            artifact apiJar
            artifact sourceJar
            artifact javadocJar
            artifact devJar
            for (f in tasks.signJar.outputs.files) {
                artifact(f) {
                    builtBy tasks.signJar
                }
            }

            repositories {
                maven {
                    def root = project.hasProperty('mavenRoot') ? project.mavenRoot : 'build/maven'
                    def releasesRepoUrl = "${root}/repos/releases"
                    def snapshotsRepoUrl = "${root}/repos/snapshots"
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                    if (project.hasProperty('mavenUser') && project.hasProperty('mavenPass')) {
                        credentials {
                            username project.mavenUser
                            password project.mavenPass
                        }
                    }
                }
            }
        }
    }
}

assemble.dependsOn signJar
tasks.configureEach { it->
    if (it.name.startsWith('curseforge')) {
        it.dependsOn generateGitChangelog
        it.onlyIf {
            project.hasProperty('curseforgeAPI')
        }
    }
}

install.dependsOn reobf

idea {
    module {
        inheritOutputDirs = false
        outputDir = new File(compileJava.destinationDir.parentFile.parentFile, "idea")
        testOutputDir = new File(compileTestJava.destinationDir.parentFile.parentFile, "ideaTest")
    }
}

compileJava.options.encoding = 'UTF-8'